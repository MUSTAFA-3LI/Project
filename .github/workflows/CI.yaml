name: CI (Build)

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  requirements_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run unit tests (optional, uncomment if needed)
      # - name: Run tests
      #   run: |
      #     pytest tester.py

  docker-compose-tests:
    runs-on: ubuntu-latest
    needs: requirements_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose

      - name: Build and start Docker Compose services
        run: |
          docker compose up -d --build

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to initialize..."
          until docker exec $(docker ps -qf "name=mysql_db") mysqladmin ping -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} --silent; do
            sleep 3
          done
          echo "MySQL is ready!"

      - name: Run Django migrations
        run: |
          docker compose exec web python manage.py migrate

      - name: Run Django tests
        run: |
          docker compose exec web python manage.py test

      - name: Stop Docker Compose services
        run: |
          docker-compose down

  build:
    runs-on: ubuntu-latest
    needs: [requirements_tests, docker-compose-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD_PROJECT }}

      - name: Get latest version from Docker Hub and increment it
        run: |
          latest_version=$(curl -s https://hub.docker.com/v2/repositories/mustafa3li/project/tags | jq -r '.results[].name' | grep -E '^version_[0-9]+$' | sort -V | tail -n1)
          if [[ -z "$latest_version" ]]; then
            new_version="version_1"
          else
            new_version="version_$(( ${latest_version#version_} + 1 ))"
          fi
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "Building Docker image with tag: $new_version"

      - name: Build and Push Docker image on Docker Hub
        run: |
          docker build -t mustafa3li/project:${{ env.NEW_VERSION }} .
          docker push mustafa3li/project:${{ env.NEW_VERSION }}
